import streamlit as st
import requests
import uuid
import re
# H√†m ƒë·ªçc n·ªôi dung t·ª´ file vƒÉn b·∫£n
def rfile(name_file):
    try:
        with open(name_file, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
            st.error(f"File {name_file} kh√¥ng t·ªìn t·∫°i.")

# Constants
BEARER_TOKEN = st.secrets.get("BEARER_TOKEN")
WEBHOOK_URL = st.secrets.get("WEBHOOK_URL")


# # Kh·ªüi t·∫°o tin nh·∫Øn "system" v√† "assistant"
# INITIAL_SYSTEM_MESSAGE = {"role": "system", "content": rfile("01.system_trainning.txt")}
# INITIAL_ASSISTANT_MESSAGE = {"role": "assistant", "content": rfile("02.assistant.txt")}

# if "messages" not in st.session_state:
#     st.session_state.messages = [INITIAL_SYSTEM_MESSAGE, INITIAL_ASSISTANT_MESSAGE]


def generate_session_id():
    return str(uuid.uuid4())

def send_message_to_llm(session_id, message):
    headers = {
        "Authorization": f"Bearer {BEARER_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "sessionId": session_id,
        "chatInput": message
    }
    try:
        response = requests.post(WEBHOOK_URL, json=payload, headers=headers)
        print("Request payload:", payload)  # In ra payload g·ª≠i ƒëi
        response.raise_for_status()
        response_data = response.json()
        print("Full response:", response_data)  # In ra to√†n b·ªô d·ªØ li·ªáu tr·∫£ v·ªÅ
        
        # Tr√≠ch xu·∫•t contract v√† urlWord
        contract = response_data[0].get('contract', "No contract received")
        urlWord = response_data[0].get('urlWord', "No URL received")
        
        # Tr·∫£ v·ªÅ object theo ƒë·ªãnh d·∫°ng N8nOutputItems
        return [{"json": {"contract": contract, "urlWord": urlWord}}]
    
    except requests.exceptions.RequestException as e:
        return [{"json": {"contract": f"Error: Failed to connect to the LLM - {str(e)}", "urlWord": ""}}]

def display_output(output):
    """Hi·ªÉn th·ªã n·ªôi dung h·ª£p ƒë·ªìng v√† URL file Word"""
    # L·∫•y contract v√† urlWord t·ª´ output
    contract = output.get('json', {}).get('contract', "No contract received")
    urlWord = output.get('json', {}).get('urlWord',"No file recceived")
    print("urlWorld: ",urlWord)
    # Hi·ªÉn th·ªã n·ªôi dung h·ª£p ƒë·ªìng
    st.markdown(contract, unsafe_allow_html=True)
    
    # Hi·ªÉn th·ªã URL file Word n·∫øu c√≥
    if urlWord and urlWord != "No URL received":
        st.markdown(
            f"""
            <a href="{urlWord}" target="_blank" style="color: blue; text-decoration: underline;">
                Xem file h·ª£p ƒë·ªìng (Word)
            </a>
            """,
            unsafe_allow_html=True
        )

def main():
    st.set_page_config(page_title="Tr·ª£ l√Ω AI", page_icon="ü§ñ", layout="centered")
    st.markdown(
        """
        <style>
            .assistant {
                padding: 10px;
                border-radius: 10px;
                max-width: 75%;
                background: none; /* M√†u trong su·ªët */
                text-align: left;
            }
            .user {
                padding: 10px;
                border-radius: 10px;
                max-width: 75%;
                background: none; /* M√†u trong su·ªët */
                text-align: right;
                margin-left: auto;
            }
            .assistant::before { content: "ü§ñ "; font-weight: bold; }
        </style>
        """,
        unsafe_allow_html=True
    )
    
    # Hi·ªÉn th·ªã logo (n·∫øu c√≥)
    try:
        col1, col2, col3 = st.columns([3, 2, 3])
        with col2:
            st.image("logo.png")
    except:
        pass
    
    # ƒê·ªçc n·ªôi dung ti√™u ƒë·ªÅ t·ª´ file
    try:
        with open("00.xinchao.txt", "r", encoding="utf-8") as file:
            title_content = file.read()
    except Exception as e:
        title_content = "Tr·ª£ l√Ω AI"

    st.markdown(
        f"""<h1 style="text-align: center; font-size: 24px;">{title_content}</h1>""",
        unsafe_allow_html=True
    )

    # Kh·ªüi t·∫°o session state
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "session_id" not in st.session_state:
        st.session_state.session_id = generate_session_id()

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn
    for message in st.session_state.messages:
        if message["role"] == "user":
            st.markdown(f'<div class="user">{message["content"]}</div>', unsafe_allow_html=True)
        elif message["role"] == "assistant":
            display_output(message["content"])

    # √î nh·∫≠p li·ªáu cho ng∆∞·ªùi d√πng
    if prompt := st.chat_input("Nh·∫≠p n·ªôi dung c·∫ßn trao ƒë·ªïi ·ªü ƒë√¢y nh√©?"):
        # L∆∞u tin nh·∫Øn c·ªßa user v√†o session state
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Hi·ªÉn th·ªã tin nh·∫Øn user v·ª´a g·ª≠i
        st.markdown(f'<div class="user">{prompt}</div>', unsafe_allow_html=True)

        # G·ª≠i y√™u c·∫ßu ƒë·∫øn LLM v√† nh·∫≠n ph·∫£n h·ªìi
        with st.spinner("ƒêang ch·ªù ph·∫£n h·ªìi t·ª´ AI..."):
            llm_response = send_message_to_llm(st.session_state.session_id, prompt)

        # L∆∞u ph·∫£n h·ªìi c·ªßa AI v√†o session state
        st.session_state.messages.append({"role": "assistant", "content": llm_response[0]})
        
        # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa AI
        display_output(llm_response[0])

        # R €û Rerun ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
        st.rerun()

if __name__ == "__main__":
    main()